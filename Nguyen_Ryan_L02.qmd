---
title: "L02 More Models"
subtitle: "Data Science 3 with R (STAT 301-3)"
author: "Ryan Nguyen"

format:
  html:
    toc: true
    embed-resources: true
    code-fold: show
    link-external-newwindow: true
    
execute:
  warning: false

from: markdown+emoji  
---

## Github Repo Link

::: {.callout-important}

To link to your github **repo**sitory, appropriately edit the example link below. Meaning replace `https://your-github-repo-url` with your github repo url. Suggest verifying the link works before submitting.

[https://github.com/STAT301-3-2023SP/L02-more-models-ryannguyen275](https://github.com/STAT301-3-2023SP/L02-more-models-ryannguyen275)

:::

## Overview

The main goals of this lab are (1) review and practice the application of machine learning within the `tidymodels` framework and (2) introduce and explore a few new model types.

```{r}
library(doMC)
registerDoMC(cores = 4)
library(tidyverse)
library(tidymodels)
load("results/result_table.rda")
load("results/final_results.rda")
```




## Dataset

We will be utilizing `wildfires.csv` dataset contained in the **data** subdirectory. `wildfires_codebook.html` provides a quick overview of the data which is where students should begin.

## Instructions

A wildlife protection area is located in the park from which this data was collected and we want to predict whether or not a wildfire will reach it (`wlf`) given all the other variables in our dataset except for `burned` (we will be using it as a target variable in the future).

Using the `tidymodels` framework, pick the best model from the following candidate models:

1.  elastic net

    -   tune `mixture` and `penalty`
    -   include all two-way interactions

2.  Nearest neighbors

    -   tune number of `neighbors`

3.  Random forest

    -   tune `mtry` and `min_n`

4.  Boosted tree

    -   tune `mtry`, `min_n`, and `learn_rate`

5.  Support vector machine (polynomial)

    -   tune `cost`, `degree`, and `scale_factor` (default values are sufficient, free to change if you want)

6.  Support vector machine (radial basis function)

    -   tune `cost` and `rbf_sigma` (default values a sufficient, free to change if you want)

7.  Single Layer Neural Network (multilayer perceptron --- mlp)

    -   tune `hidden_units` and `penalty` (default values a sufficient, free to change if you want)
    -   `nnet` for the engine will be easiest, Alternatively, you might want to try `keras` if you can get it installed ([Keras Installation](https://tensorflow.rstudio.com/guide/keras/)).
    
8. Multivariate adaptive regression splines (MARS)

    - tune `num_terms` (need to supply upperbound) and `prod_degree` (defualt works here)

Some general notes:

- For tuning we suggest using 5 folds and 3 repeats. 
- Make sure you specify which performance measure you are using to pick the best model.
- Almost all work should be done in R scripts and you will only be reporting the results (we will see the R scripts in your repo).
- Suggest using jobs.
- A basic layout is suggested/provided. 
- We also want to collect how long it takes the tuning process for each model type. We can use the `tictoc` package --- code is provided in the `template_tune.R`.

## What should be turned in

A short write-up that includes:

1. A nicely formatted table that lists the 8 general types of model and the best performance it achieved. 

2. A nicely formatted table that lists the run time for the tuning process for the 8 model types (could be combined with first table).

3. Final selection, training, and evaluation of the best model. 

## Predicting Wildfires

In this project, a dataset that describes 500 wildfires that started within a large national park was used to predict whether or not a fire would reach the wildlife protection zone, based on other variables. For each fire, the data contains 15 numeric variables (including temperature and humidity when fire started, number of days since last fire, coordinates, etc.) as well as two outcome variables (`burned`, which was not used in this project, and whether or not the fire reached the wildlife protection zone, `wlf`). Using a supervised machine learning process, we can predict whether or not a fire would reach the wildlife protection zone, which can be incredibly important in protecting wildlife and taking preventative measures.

To begin, the dataset was collected, cleaned, and prepared for machine learning. There was no missingness, nor class imbalance with the outcome variable, `wlf`, found, so imputation and down/upsampling were not utilized respectively. The data was then split into a training and testing data set, with a 0.8 proportion, stratified on `wlf`. The training data was split using v-fold cross-validation, into 5 sets of roughly equal size, 3 repeats, and stratified on `wlf`. A recipe was prepped and baked using all variables except `burned`, `step_novel()` was used to accept new levels in testing data if not seen in training data, `step_dummy()` was used to convert nominal data into numeric terms, `step_zv()` was used to remove variables that contain only a single value (and would therefore be useless in prediction), and finally `step_normalize()` was used to normalize all variables.

The 8 models used in this project was elastic net, k-nearest neighbors, random forest, boosted tree, support vector machine (polynomial), support vector machine (radial), single layer neural network, and multivariate adaptive regression splines (MARS). The models each had their engines set with tuning parameters and grids, and the grids were tuned in separate scripts. The time it took to run each model was also recorded. The best parameters of each model that results with the highest area under the receiver operator curve (`roc_auc`) was selected and the best of each model was compared, with the results shown in the table and graph below.

```{r}
result_table
results_graph
```

The neural network model had the highest `roc_auc` with 0.8978, which took 86 seconds to run, followed by the SVM Polynomial with 0.8854, then the elastic net with 0.8821. Since the neural network performed the best, it will be chosen as the final model. The parameters for this best model was `hidden_units` tuned to 7 and `penalty` tuned to 1.

The entire training data was fit to the neural network model, and the testing model was predicted.

```{r}
roc_auc
```

The final `roc_auc` after fitting the neural network model to the testing data is 0.8676. While this is lower than the 0.8978 found with the folds, it still means the model performed moderately well, since an `roc_auc` of 1 would be a perfect prediction model.

```{r}
conf_matrix

accuracy
```

Finally, above shows the confusion matrix of these results. The model predicted 37 yeses and 44 nos correctly, and 10 yeses incorrectly and 10 nos incorrectly. The model performed moderately well, correctly predicting about 80 percent. This model can be helpful for park rangers and fire departments in predicting whether or not a fire would reach the wildlife protection zone. 


